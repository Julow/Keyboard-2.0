package juloo.keyboard2;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.graphics.Paint;
import android.graphics.Typeface;
import android.graphics.Color;
import android.util.AttributeSet;

import android.content.SharedPreferences;
import android.preference.PreferenceManager;
import android.util.DisplayMetrics;
import android.util.TypedValue;

public class Theme
{
  public final Paint keyBgPaint = new Paint();
  public final Paint keyDownBgPaint = new Paint();
  public final int lockedColor;
  public final int activatedColor;
  public final int labelColor;
  public final int subLabelColor;

  public final float keyBorderRadius;

  private final Paint _keyLabelPaint;
  private final Paint _specialKeyLabelPaint;
  private final Paint _keySubLabelPaint;
  private final Paint _specialKeySubLabelPaint;
  
  public final boolean drawKeyBorder;
  public final boolean drawKeyBorderTop;
  public final boolean drawKeyBorderBottom;
  public final boolean drawKeyBorderLeft;
  public final boolean drawKeyBorderRight;
  
  public final Paint keyBorderTopPaint;
  public final Paint keyBorderBottomPaint;
  public final Paint keyBorderLeftPaint;
  public final Paint keyBorderRightPaint;
  
  public final float keyBorderTopOffset;
  public final float keyBorderBottomOffset;
  public final float keyBorderLeftOffset;
  public final float keyBorderRightOffset;
  
  public final boolean keyBorderTopOutside;
  public final boolean keyBorderBottomOutside;
  public final boolean keyBorderLeftOutside;
  public final boolean keyBorderRightOutside;
  

  public Theme(Keyboard2View view, Context context, AttributeSet attrs)
  {
    TypedArray s = context.getTheme().obtainStyledAttributes(attrs, R.styleable.keyboard, 0, 0);

    SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
    if ("custom".equals(prefs.getString("theme", "")))
    {
      Resources res = context.getResources();
      DisplayMetrics dm = res.getDisplayMetrics();
      
      int color;
      try { color = Color.parseColor(prefs.getString("keyboard_bg", "")); } catch (Exception e) { color = s.getColor(R.styleable.keyboard_colorKeyboard, 0); }
      view.setBackgroundColor(color);
      
      try { color = Color.parseColor(prefs.getString("key_bg", "")); } catch (Exception e) { color = s.getColor(R.styleable.keyboard_colorKey, 0); }
      keyBgPaint.setColor(color);

      try { color = Color.parseColor(prefs.getString("active_key_bg", "")); } catch (Exception e) { color = s.getColor(R.styleable.keyboard_colorKeyActivated, 0); }
      keyDownBgPaint.setColor(color);

      try { color = Color.parseColor(prefs.getString("label", "")); } catch (Exception e) { color = s.getColor(R.styleable.keyboard_colorLabel, 0); }
      labelColor = color;
      
      try { color = Color.parseColor(prefs.getString("active_label", "")); } catch (Exception e) { color = s.getColor(R.styleable.keyboard_colorLabelActivated, 0); }
      activatedColor = color;
      
      try { color = Color.parseColor(prefs.getString("locked_label", "")); } catch (Exception e) { color = s.getColor(R.styleable.keyboard_colorLabelLocked, 0); }
      lockedColor = color;
      
      try { color = Color.parseColor(prefs.getString("sublabel", "")); } catch (Exception e) { color = s.getColor(R.styleable.keyboard_colorSubLabel, 0); }
      subLabelColor = color;
      
      int radius = prefs.getInt("key_border_radius", -1);
      if (radius == -1) keyBorderRadius = s.getDimension(R.styleable.keyboard_keyBorderRadius, 0);
      else keyBorderRadius = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, radius, dm);
      
      // key border
      float keyBorderWidth;
      float keyBorderOffset;
      
      try { color = Color.parseColor(prefs.getString("key_border_top_color", "")); } catch (Exception e) { color = s.getColor(R.styleable.keyboard_keyBorderTopColor, 0); }
      keyBorderWidth = prefs.getFloat("key_border_top_width", Float.MAX_VALUE);
      if (keyBorderWidth == Float.MAX_VALUE) keyBorderWidth = s.getDimension(R.styleable.keyboard_keyBorderTopWidth, 0);
      else keyBorderWidth = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, keyBorderWidth, dm);
      keyBorderTopOutside = keyBorderWidth >= 0.f;
      keyBorderWidth = Math.abs(keyBorderWidth);
      keyBorderTopPaint = keyBorderPaint(color, keyBorderWidth);
      keyBorderOffset = prefs.getFloat("key_border_top_offset", Float.MAX_VALUE);
      if (keyBorderOffset == Float.MAX_VALUE) keyBorderTopOffset = s.getDimension(R.styleable.keyboard_keyBorderTopOffset, 0);
      else keyBorderTopOffset = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, keyBorderOffset, dm);
      drawKeyBorderTop = keyBorderWidth > 0.f;
      
      try { color = Color.parseColor(prefs.getString("key_border_bottom_color", "")); } catch (Exception e) { color = s.getColor(R.styleable.keyboard_keyBorderBottomColor, 0); }
      keyBorderWidth = prefs.getFloat("key_border_bottom_width", Float.MAX_VALUE);
      if (keyBorderWidth == Float.MAX_VALUE) keyBorderWidth = s.getDimension(R.styleable.keyboard_keyBorderBottomWidth, 0);
      else keyBorderWidth = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, keyBorderWidth, dm);
      keyBorderBottomOutside = keyBorderWidth >= 0.f;
      keyBorderWidth = Math.abs(keyBorderWidth);
      keyBorderBottomPaint = keyBorderPaint(color, keyBorderWidth);
      keyBorderOffset = prefs.getFloat("key_border_bottom_offset", Float.MAX_VALUE);
      if (keyBorderOffset == Float.MAX_VALUE) keyBorderBottomOffset = s.getDimension(R.styleable.keyboard_keyBorderBottomOffset, 0);
      else keyBorderBottomOffset = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, keyBorderOffset, dm);
      drawKeyBorderBottom = keyBorderWidth > 0.f;
      
      try { color = Color.parseColor(prefs.getString("key_border_left_color", "")); } catch (Exception e) { color = s.getColor(R.styleable.keyboard_keyBorderLeftColor, 0); }
      keyBorderWidth = prefs.getFloat("key_border_left_width", Float.MAX_VALUE);
      if (keyBorderWidth == Float.MAX_VALUE) keyBorderWidth = s.getDimension(R.styleable.keyboard_keyBorderLeftWidth, 0);
      else keyBorderWidth = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, keyBorderWidth, dm);
      keyBorderLeftOutside = keyBorderWidth >= 0.f;
      keyBorderWidth = Math.abs(keyBorderWidth);
      keyBorderLeftPaint = keyBorderPaint(color, keyBorderWidth);
      keyBorderOffset = prefs.getFloat("key_border_left_offset", Float.MAX_VALUE);
      if (keyBorderOffset == Float.MAX_VALUE) keyBorderLeftOffset = s.getDimension(R.styleable.keyboard_keyBorderLeftOffset, 0);
      else keyBorderLeftOffset = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, keyBorderOffset, dm);
      drawKeyBorderLeft = keyBorderWidth > 0.f;
      
      try { color = Color.parseColor(prefs.getString("key_border_right_color", "")); } catch (Exception e) { color = s.getColor(R.styleable.keyboard_keyBorderRightColor, 0); }
      keyBorderWidth = prefs.getFloat("key_border_right_width", Float.MAX_VALUE);
      if (keyBorderWidth == Float.MAX_VALUE) keyBorderWidth = s.getDimension(R.styleable.keyboard_keyBorderRightWidth, 0);
      else keyBorderWidth = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, keyBorderWidth, dm);
      keyBorderRightOutside = keyBorderWidth >= 0.f;
      keyBorderWidth = Math.abs(keyBorderWidth);
      keyBorderRightPaint = keyBorderPaint(color, keyBorderWidth);
      keyBorderOffset = prefs.getFloat("key_border_right_offset", Float.MAX_VALUE);
      if (keyBorderOffset == Float.MAX_VALUE) keyBorderRightOffset = s.getDimension(R.styleable.keyboard_keyBorderRightOffset, 0);
      else keyBorderRightOffset = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, keyBorderOffset, dm);
      drawKeyBorderRight = keyBorderWidth > 0.f;
    }
    else
    {
      keyBgPaint.setColor(s.getColor(R.styleable.keyboard_colorKey, 0));
      keyDownBgPaint.setColor(s.getColor(R.styleable.keyboard_colorKeyActivated, 0));
      // colorKeyboard = s.getColor(R.styleable.keyboard_colorKeyboard, 0);
      labelColor = s.getColor(R.styleable.keyboard_colorLabel, 0);
      activatedColor = s.getColor(R.styleable.keyboard_colorLabelActivated, 0);
      lockedColor = s.getColor(R.styleable.keyboard_colorLabelLocked, 0);
      subLabelColor = s.getColor(R.styleable.keyboard_colorSubLabel, 0);
      keyBorderRadius = s.getDimension(R.styleable.keyboard_keyBorderRadius, 0);
      
      // key border
      float keyBorderWidth;
      
      keyBorderWidth = s.getDimension(R.styleable.keyboard_keyBorderTopWidth, 0);
      keyBorderTopOutside = keyBorderWidth >= 0.f;
      keyBorderWidth = Math.abs(keyBorderWidth);
      keyBorderTopPaint = keyBorderPaint(s.getColor(R.styleable.keyboard_keyBorderTopColor, 0), keyBorderWidth);
      keyBorderTopOffset = s.getDimension(R.styleable.keyboard_keyBorderTopOffset, 0);
      drawKeyBorderTop = keyBorderWidth > 0.f;
      
      keyBorderWidth = s.getDimension(R.styleable.keyboard_keyBorderBottomWidth, 0);
      keyBorderBottomOutside = keyBorderWidth >= 0.f;
      keyBorderWidth = Math.abs(keyBorderWidth);
      keyBorderBottomPaint = keyBorderPaint(s.getColor(R.styleable.keyboard_keyBorderBottomColor, 0), keyBorderWidth);
      keyBorderBottomOffset = s.getDimension(R.styleable.keyboard_keyBorderBottomOffset, 0);
      drawKeyBorderBottom = keyBorderWidth > 0.f;
      
      keyBorderWidth = s.getDimension(R.styleable.keyboard_keyBorderLeftWidth, 0);
      keyBorderLeftOutside = keyBorderWidth >= 0.f;
      keyBorderWidth = Math.abs(keyBorderWidth);
      keyBorderLeftPaint = keyBorderPaint(s.getColor(R.styleable.keyboard_keyBorderLeftColor, 0), keyBorderWidth);
      keyBorderLeftOffset = s.getDimension(R.styleable.keyboard_keyBorderLeftOffset, 0);
      drawKeyBorderLeft = keyBorderWidth > 0.f;
      
      keyBorderWidth = s.getDimension(R.styleable.keyboard_keyBorderRightWidth, 0);
      keyBorderRightOutside = keyBorderWidth >= 0.f;
      keyBorderWidth = Math.abs(keyBorderWidth);
      keyBorderRightPaint = keyBorderPaint(s.getColor(R.styleable.keyboard_keyBorderRightColor, 0), keyBorderWidth);
      keyBorderRightOffset = s.getDimension(R.styleable.keyboard_keyBorderRightOffset, 0);
      drawKeyBorderRight = keyBorderWidth > 0.f;
      
      
    }
    s.recycle();
    drawKeyBorder = drawKeyBorderTop || drawKeyBorderBottom || drawKeyBorderLeft || drawKeyBorderRight;
    
    _keyLabelPaint = initLabelPaint(Paint.Align.CENTER, null);
    _keySubLabelPaint = initLabelPaint(Paint.Align.LEFT, null);
    Typeface specialKeyFont = getSpecialKeyFont(context);
    _specialKeyLabelPaint = initLabelPaint(Paint.Align.CENTER, specialKeyFont);
    _specialKeySubLabelPaint = initLabelPaint(Paint.Align.LEFT, specialKeyFont);
    
  }
  

  public Paint labelPaint(boolean special_font)
  {
    Paint p = special_font ? _specialKeyLabelPaint : _keyLabelPaint;
    return p;
  }

  public Paint subLabelPaint(boolean special_font, Paint.Align align)
  {
    Paint p = special_font ? _specialKeySubLabelPaint : _keySubLabelPaint;
    p.setTextAlign(align);
    return p;
  }

  private Paint initLabelPaint(Paint.Align align, Typeface font)
  {
    Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
    paint.setTextAlign(align);
    if (font != null)
      paint.setTypeface(font);
    return (paint);
  }
  
  private Paint keyBorderPaint(int color, float width)
  {
    Paint p = new Paint(Paint.ANTI_ALIAS_FLAG);
    p.setColor(color);
    p.setStrokeWidth(width);
    p.setStyle(Paint.Style.STROKE);
    return p;
  }

  private static Typeface _specialKeyFont = null;

  static public Typeface getSpecialKeyFont(Context context)
  {
    if (_specialKeyFont == null)
    {
      _specialKeyFont = Typeface.createFromAsset(context.getAssets(), "fonts/keys.ttf");
    }
    return _specialKeyFont;
  }
}
